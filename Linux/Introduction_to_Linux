# Introduction to Linux

The Linux kernel was originally written by Finnish student Linus Torvalds at the University of Helsinki as a personal hobby.

Linux is a free and open-source Unix-like operating system. It is a multi-user, multi-tasking system that supports multi-threading and multi-CPU environments, based on the POSIX and UNIX standards.

Linux can run major UNIX tools, software applications, and network protocols. It supports both 32-bit and 64-bit hardware. Linux inherits Unix's core design philosophy centered around networking, making it a stable and efficient multi-user network operating system.

## Features

1. **Free and Open Source**  
   Linux is open source, allowing anyone to access its source code, modify it, or distribute it freely.

2. **Cross-Platform Support**  
   It supports a wide range of hardware architectures, including traditional x86, ARM, and high-performance server designs.

3. **Security**  
   Linux has robust security mechanisms and is widely used in servers, embedded systems, and cloud computing platforms.

4. **Community Support**  
   Linux has a large global community of contributors who continuously maintain and enhance its functionality.

## Common Use Cases

- **Server Operating System**  
  Linux is widely used for web servers, database servers, and cloud computing platforms.

- **Development Environment**  
  Many developers prefer Linux as their primary platform for programming and development.

- **Embedded Systems**  
  Linux is commonly used in embedded systems like smartphones, routers, and other network devices.

- **Desktop Systems**  
  Although its desktop market share is smaller, Linux offers several desktop environments suitable for personal use.

# Directory Structure in Linux

In Linux or Unix operating systems, all files and directories are organized into an inverted tree structure starting with a root node.

The top level of the file system begins with the root directory, represented by `/`. Under the root directory, there can be both directories and files. Each directory can contain subdirectories and files, forming a large hierarchical file system.

## Special Directories in Linux

- `.`: Represents the current directory, which can also be referenced as `./`.
- `..`: Represents the parent directory, which can also be referenced as `../`.
- Hidden files or directories: If a file or directory name starts with a dot (`.`), it is considered hidden (e.g., `.bashrc`). These are not shown by default during file searches.

## Essential Directories for System Boot

- `/boot`: Contains the kernel files required to boot Linux, including symbolic links and image files.
- `/etc`: Stores all the system configuration files and subdirectory lists. Modifying files in this directory may prevent the system from booting.
- `/lib`: Contains essential libraries (e.g., C++ libraries) similar to DLL files in Windows. Almost all applications rely on these shared libraries.
- `/sys`: Introduced with the Linux 2.6 kernel. This directory integrates information from three file systems: the `proc` file system for process information, the `devfs` file system for devices, and the `devpts` file system for pseudo-terminals. It reflects the kernel device tree.

## Commands and Programs

- `/bin`: Stores commonly used programs and commands.
- `/sbin`: Stores programs and commands accessible only to the system administrator.

## External File Management

- `/dev`: Short for "device," this directory contains Linux's external devices. Note: Accessing devices in Linux is the same as accessing files.
- `/media`: Similar to Windows, this directory is used for temporary devices like USB drives and CDs. Detected devices are mounted here.
- `/mnt`: Used for temporarily mounting other file systems. For example, you can mount a CD drive to `/mnt/` and then access its contents from this directory.

## Temporary Files

- `/run`: A temporary file system that stores information since the system booted. Files in this directory are cleared after a reboot.
- `/lost+found`: Usually empty, but stores files after an improper system shutdown.
- `/tmp`: Used to store temporary files.

## User Accounts

- `/root`: The home directory of the system administrator.
- `/home`: The home directory of users, named after their accounts.
- `/usr`: Contains user applications and files, similar to Windows' "Program Files" directory.
  - `/usr/bin`: Applications and commands for system users.
  - `/usr/sbin`: Advanced management programs and system daemons for superusers.
  - `/usr/src`: The default directory for kernel source code.

## Runtime Directories

- `/var`: Stores frequently modified data, such as logs of running programs (e.g., `/var/log`).
- `/proc`: A virtual directory that maps system memory. Its contents are not stored on the disk but in memory. You can access this directory to obtain system information or modify certain files directly.

## For Extensions

- `/opt`: Default empty directory where additional software can be installed.
- `/srv`: Stores data extracted after service startup (empty if not running a server).

# Linux File Attributes and File Management

Linux is a typical multi-user system where users have different roles and permissions to ensure system security. File permissions and ownership are essential for managing access to files and directories in Linux.

## File Permissions

Linux uses a system of permissions to control access to files and directories. Each file or directory has three categories of permissions:

- **Owner (`owner`)**: The user who owns the file.
- **Group (`group`)**: A group of users who share access permissions.
- **Others (`others`)**: All other users.

### Permission Types

- **Read (`r`)**: Allows reading the file or listing directory contents.
- **Write (`w`)**: Allows modifying the file or creating/deleting files in a directory.
- **Execute (`x`)**: Allows executing the file or accessing the directory.

Permissions are represented by a string of 10 characters. For example:

```
-rwxr-xr--
```

- The first character indicates the file type:
  - `d`: Directory.
  - `-`: Regular file.
  - `l`: Link file.
  - `b`: Block device.
  - `c`: Character device.
- The next nine characters are grouped into three sets of `rwx`, representing the permissions for the owner, group, and others.

### Checking Permissions

Use the `ls -l` or `ll` command to view file attributes, including permissions, owner, and group:

```
[root@www /]# ls -l
total 64
drwxr-xr-x 2 root root 4096 Feb 15 14:46 cron
-rw-r--r-- 1 root root 68495 Jun 25 08:53 install.log
```

### Numeric Representation of Permissions

Permissions can also be represented by numbers:
- `r = 4`, `w = 2`, `x = 1`.
- Add the values for each set of permissions. For example:
  - `rwx` = 4+2+1 = 7
  - `rw-` = 4+2 = 6
  - `r--` = 4 = 4

Example:
```
-rwxrwx--- = 770
```

## Managing Ownership and Permissions

### Changing Ownership with `chown`

The `chown` command changes the owner and/or group of a file.

- Syntax:
  ```
  chown [owner] [file]
  chown [owner:group] [file]
  chown -R [owner:group] [directory]  # Recursive for all files in a directory
  ```
- Example:
  ```
  [root@www ~]# chown bin install.log
  [root@www ~]# chown root:root install.log
  ```

### Changing Group with `chgrp`

The `chgrp` command changes the group ownership of a file.

- Syntax:
  ```
  chgrp [group] [file]
  chgrp -R [group] [directory]  # Recursive for all files in a directory
  ```

### Changing Permissions with `chmod`

The `chmod` command modifies file permissions using numeric or symbolic methods.

#### Numeric Method

- Syntax:
  ```
  chmod [permissions] [file]
  chmod -R [permissions] [directory]  # Recursive for all files in a directory
  ```
- Example:
  ```
  chmod 777 .bashrc  # Full permissions for all
  chmod 754 file     # Owner: rwx (7), Group: r-x (5), Others: r-- (4)
  ```

#### Symbolic Method

- Syntax:
  ```
  chmod [who][operator][permissions] [file]
  ```
  - `who`: `u` (user), `g` (group), `o` (others), `a` (all).
  - `operator`: `+` (add), `-` (remove), `=` (set).
  - `permissions`: `r` (read), `w` (write), `x` (execute).

- Example:
  ```
  chmod u=rwx,g=rx,o=r file  # Owner: rwx, Group: rx, Others: r
  chmod a-x file             # Remove execute permission for all
  ```

## Examples

1. **Set permissions to `-rwxr-xr--` using symbolic method**:
   ```
   chmod u=rwx,g=rx,o=r test1
   ```

2. **Remove execute permissions for all**:
   ```
   chmod a-x test1
   ```

3. **View updated permissions**:
   ```
   ls -al test1
   ```

Linux permissions and ownership provide a powerful way to manage access control, ensuring both security and flexibility for multi-user environments.

# Linux Directory and File Commands

Linux provides a variety of commands to handle directories and files. Below is an overview of commonly used commands for managing directories and viewing file contents.

---

## **Directory Management Commands**

### `ls` (List Files)
Lists the contents of a directory.

- **Syntax**:
  ```
  ls [options] [directory_name]
  ```
- **Common Options**:
  - `-a`: Lists all files, including hidden files (files starting with `.`).
  - `-d`: Lists only the directory itself, not its contents.
  - `-l`: Displays detailed information (permissions, owner, size, etc.).
- **Example**:
  ```
  ls -al ~
  ```

---

### `cd` (Change Directory)
Changes the current working directory.

- **Syntax**:
  ```
  cd [relative_path | absolute_path]
  ```
- **Examples**:
  - Change to `/root/runoob/` using an absolute path:
    ```
    cd /root/runoob/
    ```
  - Change to the home directory:
    ```
    cd ~
    ```
  - Move to the parent directory:
    ```
    cd ..
    ```

---

### `pwd` (Print Working Directory)
Displays the current directory.

- **Syntax**:
  ```
  pwd [-P]
  ```
- **Options**:
  - `-P`: Displays the actual path (resolves symbolic links).
- **Example**:
  ```
  pwd -P
  ```

---

### `mkdir` (Make Directory)
Creates a new directory.

- **Syntax**:
  ```
  mkdir [-mp] directory_name
  ```
- **Options**:
  - `-m`: Sets permissions for the directory.
  - `-p`: Creates parent directories as needed.
- **Examples**:
  - Create a single directory:
    ```
    mkdir test
    ```
  - Create nested directories:
    ```
    mkdir -p test1/test2/test3
    ```

---

### `rmdir` (Remove Empty Directory)
Deletes empty directories.

- **Syntax**:
  ```
  rmdir [-p] directory_name
  ```
- **Options**:
  - `-p`: Deletes specified directory and its empty parent directories.
- **Example**:
  ```
  rmdir -p test1/test2/test3
  ```

---

### `cp` (Copy Files or Directories)
Copies files or directories.

- **Syntax**:
  ```
  cp [options] source destination
  ```
- **Common Options**:
  - `-a`: Preserves file attributes.
  - `-r`: Copies directories recursively.
  - `-i`: Prompts before overwriting files.
- **Example**:
  ```
  cp -i ~/.bashrc /tmp/bashrc
  ```

---

### `rm` (Remove Files or Directories)
Deletes files or directories.

- **Syntax**:
  ```
  rm [-fir] file_or_directory
  ```
- **Options**:
  - `-f`: Forces deletion without prompts.
  - `-i`: Prompts before deletion.
  - `-r`: Deletes directories and their contents recursively.
- **Example**:
  ```
  rm -i bashrc
  ```

---

### `mv` (Move or Rename Files/Directories)
Moves or renames files and directories.

- **Syntax**:
  ```
  mv [options] source destination
  ```
- **Options**:
  - `-i`: Prompts before overwriting.
  - `-f`: Forces overwriting without prompts.
- **Example**:
  ```
  mv bashrc mvtest/
  mv mvtest mvtest2
  ```

---

## Download Files from a Remote Linux Server through SSH

To download files from a remote Linux server via SSH, you can use several methods depending on your requirements. Below are the most common ways to achieve this:

---

### **1. Using `scp` Command**
The `scp` (Secure Copy Protocol) command allows you to securely copy files between a local machine and a remote server using SSH.

- **Syntax**:
  ```
  scp [options] user@remote_host:/path/to/remote/file /path/to/local/destination
  ```
- **Example**:
  ```
  scp user@remote_host:/home/user/file.txt /local/directory/
  ```
  This copies `file.txt` from the remote server to the local machine.

- **To download an entire directory**:
  ```
  scp -r user@remote_host:/path/to/remote/directory /local/destination/
  ```

---

### **2. Using `sftp` Command**
The `sftp` (Secure File Transfer Protocol) command provides an interactive way to transfer files securely over SSH.

- **Steps**:
  1. Connect to the remote server:
     ```
     sftp user@remote_host
     ```
  2. Navigate to the directory containing the file:
     ```
     cd /path/to/remote/directory
     ```
  3. Download the file:
     ```
     get file.txt /local/directory/
     ```
  4. Exit the session:
     ```
     bye
     ```


## **File Viewing Commands**

### `cat` (View File Content)
Displays file content from the first line.

- **Syntax**:
  ```
  cat [-AbEnTv] file
  ```
- **Options**:
  - `-n`: Displays line numbers.
  - `-E`: Displays `$` at the end of each line.
- **Example**:
  ```
  cat /etc/issue
  ```

---

### `tac` (Reverse File Content)
Displays file content from the last line.

- **Example**:
  ```
  tac /etc/issue
  ```

---

### `nl` (Numbered Lines)
Displays file content with line numbers.

- **Syntax**:
  ```
  nl [-bnw] file
  ```
- **Options**:
  - `-b a`: Numbers all lines, including empty ones.
  - `-b t`: Numbers non-empty lines only.
- **Example**:
  ```
  nl /etc/issue
  ```

---

### `more` (View File in Pages)
Displays file content one page at a time.

- **Example**:
  ```
  more /etc/man_db.config
  ```
- **Navigation**:
  - `Space`: Next page.
  - `Enter`: Next line.
  - `/string`: Search for `string`.
  - `q`: Quit.

---

### `less` (Enhanced Paging Viewer)
Similar to `more`, but allows backward navigation.

- **Example**:
  ```
  less /etc/man.config
  ```
- **Navigation**:
  - `Space`: Next page.
  - `PageDown`: Next page.
  - `PageUp`: Previous page.
  - `/string`: Search forward for `string`.
  - `?string`: Search backward for `string`.
  - `q`: Quit.

---

### `head` (View File Start)
Displays the first few lines of a file.

- **Syntax**:
  ```
  head [-n number] file
  ```
- **Example**:
  ```
  head -n 20 /etc/man.config
  ```

---

### `tail` (View File End)
Displays the last few lines of a file.

- **Syntax**:
  ```
  tail [-n number] file
  ```
- **Options**:
  - `-f`: Continuously monitors file changes.
- **Example**:
  ```
  tail -n 20 /etc/man.config
  tail -f /var/log/syslog
  ```

---

## **Adding Content to a File**

To add content to a file in Linux, you can use several different commands depending on your needs. Below are some of the most common methods:

### 1. **Using `echo` Command**
You can append content to a file using the `>>` operator.

- **Syntax**:
  ```
  echo "Your content here" >> filename
  ```
- **Example**:
  ```
  echo "This is new content" >> file.txt
  ```

---

### 2. **Using `cat` Command**
You can use the `cat` command to append or overwrite content in a file.

- **To append content**:
  ```
  cat >> filename
  ```
  After pressing Enter, type the content you want to add. Press `Ctrl + D` to save and exit.

- **Example**:
  ```
  cat >> file.txt
  This is new content.
  (Press Ctrl + D to save)
  ```

---

### 3. **Using `nano` or `vim` Editors**
You can open the file in a text editor like `nano` or `vim` to add content interactively.

- **Using `nano`**:
  ```
  nano filename
  ```
  Add your content, then press `Ctrl + O` to save and `Ctrl + X` to exit.

- **Using `vim`**:
  ```
  vim filename
  ```
  Press `i` to enter insert mode, add your content, then press `Esc`, type `:wq`, and hit Enter to save and exit.

---

### 4. **Using `>` for Overwriting and `>>` for Appending**
The difference between `>` and `>>` is:
- `>` overwrites the file.
- `>>` appends to the file.

- **Example (overwrite)**:
  ```
  echo "Overwrite content" > file.txt
  ```
- **Example (append)**:
  ```
  echo "Append content" >> file.txt
  ```

# Linux `apt` Command

The `apt` (Advanced Packaging Tool) command is a shell front-end package manager in Debian and Ubuntu systems. It is used for searching, installing, upgrading, and removing software packages. The `apt` command is concise and easy to remember.

**Note**: The `apt` command requires superuser (root) privileges to execute.

---

## **Syntax**
```
apt [options] [command] [package ...]
```
- **options**: Optional, includes:
  - `-h`: Help.
  - `-y`: Automatically answer "yes" to all prompts during installation.
  - `-q`: Suppress installation process output.
- **command**: The operation to perform.
- **package**: The name of the package.

---

## **Common Commands**

### 1. **Update the Software List**
Updates the list of available software packages and their versions.
```
sudo apt update
```

---

### 2. **Upgrade Installed Packages**
Upgrades all installed packages to the latest available version.
```
sudo apt upgrade
```

---

### 3. **List Upgradable Packages**
Lists all packages that can be upgraded along with their version information.
```
apt list --upgradable
```

---

### 4. **Full Upgrade**
Performs a full upgrade of the system, removing packages if necessary to complete the upgrade.
```
sudo apt full-upgrade
```

---

### 5. **Install a Specific Package**
Installs a single package.
```
sudo apt install <package_name>
```

---

### 6. **Install Multiple Packages**
Installs multiple packages at once.
```
sudo apt install <package_1> <package_2> <package_3>
```

---

### 7. **Update a Specific Package**
Updates a specific package.
```
sudo apt update <package_name>
```

---

### 8. **Show Package Information**
Displays detailed information about a package, such as version, installation size, dependencies, etc.
```
sudo apt show <package_name>
```

---

### 9. **Remove a Package**
Removes a package while retaining its configuration files.
```
sudo apt remove <package_name>
```

---

### 10. **Remove Unused Dependencies**
Cleans up unused dependencies and library files.
```
sudo apt autoremove
```

---

### 11. **Purge a Package**
Removes a package along with its configuration files.
```
sudo apt purge <package_name>
```

---

### 12. **Search for a Package**
Searches for a package by keyword.
```
sudo apt search <keyword>
```

---

### 13. **List Installed Packages**
Lists all installed packages.
```
apt list --installed
```

---

### 14. **List Installed Packages with Version Information**
Lists all installed packages and their versions.
```
apt list --all-versions
```


## Resources

- [Official Linux Website](https://www.kernel.org/)
- [Linux Documentation Project](https://www.tldp.org/)
- [Linux Kernel Repository on GitHub](https://github.com/torvalds/linux)

Linux is a transformative operating system that is not only suitable for technical experts but also provides powerful features and flexibility for everyday users. If you haven’t tried it yet, consider downloading a distribution and exploring what it has to offer!